// US-100 sensor
const int trigPin = 5;
const int echoPin = 18;
const int red_ledPin = 19;
const int blue_ledPin = 16;
const int green_ledPin = 17;
int target = 30;
int distSetting = 0;
const int buttonPin = 12;
int section = target+(target*0.75);

int errorLow = 50;
int oldDistReading;
int loopNum = 0;

//oled display
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
 
#define SOUND_SPEED 0.034
#define DELAY_BETWEEN_READINGS 100
 
long pulseDuration;
float distance, diff;
float mid = target+(section);

//array that holds the norse iot startup logo
const unsigned char NorseIOTLogo [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9f, 0xff, 0xf0, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x01, 0xff, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x01, 0xff, 0xe0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x80, 0x01, 0xfe, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x01, 0xe0, 0x00, 0x73, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xce, 0x00, 0x00, 0x00, 0x00, 0x38, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x8e, 0x00, 0x03, 0xe0, 0x00, 0x18, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x8c, 0x00, 0x0f, 0xf8, 0x00, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x0f, 0xfc, 0x00, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x0c, 0x00, 0x1c, 0x1c, 0x00, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x0c, 0x00, 0x7c, 0x1f, 0x80, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x0e, 0x01, 0xfc, 0x9f, 0xc0, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x0e, 0x03, 0xcc, 0xdd, 0xf0, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x8f, 0x0c, 0x9c, 0x78, 0x78, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0xde, 0x0c, 0x1c, 0x3c, 0xf0, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0xfc, 0x0c, 0x1c, 0x0f, 0xf8, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x0e, 0xf8, 0x0c, 0x1c, 0x07, 0xb8, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x1c, 0x70, 0x0c, 0x1c, 0x07, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x1c, 0x60, 0x0c, 0xdc, 0x03, 0x8e, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xb8, 0xe0, 0x0c, 0xdc, 0x01, 0x8e, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xc0, 0x0c, 0x1c, 0x01, 0xc7, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf1, 0xc0, 0x0c, 0x1c, 0x01, 0xc7, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xc0, 0x0c, 0x1c, 0x00, 0xc3, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x80, 0x0c, 0x1c, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x80, 0x0c, 0xdc, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x80, 0x0c, 0xdc, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x80, 0x0c, 0x1c, 0x00, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x0c, 0x1c, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x8c, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x8c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xe0, 0x03, 0x81, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x03, 0x87, 0xf0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x70, 0x03, 0x8f, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x03, 0x9e, 0x38, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x39, 0xe3, 0x9c, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3b, 0xf3, 0x9c, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3b, 0xf3, 0x9c, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x03, 0x9c, 0x1c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x03, 0x8e, 0x38, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x03, 0x8f, 0xf0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x30, 0x03, 0x83, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {
  Serial.begin(115200);

  pinMode(red_ledPin, OUTPUT);
  pinMode(blue_ledPin, OUTPUT);
  pinMode(green_ledPin, OUTPUT);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(buttonPin, INPUT);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  //startup logo
  display.clearDisplay();
  display.drawBitmap(0, 0, NorseIOTLogo, 128, 64, 1);
  display.display();
  delay(4000);

  //set text parameters
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
}

int changeDistSetting(){
  Serial.println("settings changed");
  delay(500);
  if(distSetting == 0){
    return 1;
  }
  else{
    return 0;
  }
}

float calculateDist(long duration){
  if(distSetting == 0){
    return duration * SOUND_SPEED / 2;
  }
  else{
    return duration * SOUND_SPEED / 2 / 2.54;
  }
}
 
void readSensor() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  pulseDuration = pulseIn(echoPin, HIGH);
  distance = calculateDist(pulseDuration);
}

void pulseLights(){
  analogWrite (red_ledPin, 0);
  analogWrite (blue_ledPin, 0);
  analogWrite (green_ledPin, 0);
  for (int val = 0; val < 255; val++) {
       analogWrite(red_ledPin, val);
       delay(5);
   }
   for (int j = 255; j > 0; j--) {
      analogWrite(red_ledPin, j);
      delay(5);
   }
}
 
void loop() {
  readSensor();
  if (loopNum != 0){
    if (abs(oldDistReading-distance) > 50){
      distance = oldDistReading;
    }
  }
  else{
    oldDistReading = distance;
    loopNum++;
  }

  long int startHoldButtonTime = millis();
  long int endHoldButtonTime = millis();
  if (digitalRead(buttonPin) == HIGH){
    analogWrite(red_ledPin, 0);
    analogWrite(blue_ledPin, 0);
    analogWrite(green_ledPin, 0);
    while (digitalRead(buttonPin) == HIGH){
      endHoldButtonTime = millis();
      if(endHoldButtonTime - startHoldButtonTime > 5000){
        analogWrite(red_ledPin, 0);
        delay(100);
        analogWrite(red_ledPin, 255);
        delay(100);
      }
    }
  
    if(endHoldButtonTime - startHoldButtonTime > 3000){
        target = distance;
        section = target+(target*0.75);
        analogWrite(red_ledPin, 0);
        analogWrite(green_ledPin, 255);
        delay(200);
        analogWrite(green_ledPin, 0);
        delay(100);
        Serial.print("new target distance set to ");
        Serial.println(distance);
      }
      else{
        distSetting = changeDistSetting();
        if(distSetting == 0){
          target = target*2.54;
          mid = mid*2.54;
          errorLow = errorLow*2.54;
        }
        else{
          target = target/2.54;
          mid = mid/2.54;
          errorLow = errorLow/2.54;
        }
      }
  }

  Serial.print("Sensor Distance: ");
  Serial.print(distance);
  display.clearDisplay();
  display.setCursor(0, 10);
  display.print(distance);
  if(distSetting == 0){
    Serial.println("cm");
    display.println("cm");
  }
  else{
    Serial.println("in");
    display.println("in");
  }
  display.display(); 
  if (distance <= target){
    analogWrite(red_ledPin, 255);
    analogWrite(blue_ledPin, 0);
    analogWrite(green_ledPin, 0);
    Serial.println("LED red");
  }
  else if (distance > target && distance <= mid){
    analogWrite(red_ledPin, 240);
    analogWrite(blue_ledPin, 15);
    analogWrite(green_ledPin, 40);
    Serial.println("LED 0range");
  }
  else if (distance > mid){
    analogWrite(red_ledPin, 150);
    analogWrite(blue_ledPin, 40);
    analogWrite(green_ledPin, 125);
    Serial.println("LED yellow");
  }

  oldDistReading = distance;
  delay(DELAY_BETWEEN_READINGS);
}
